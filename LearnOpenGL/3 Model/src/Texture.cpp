#include "Texture.h"

#include <string>
#include <windows.h>

#include "stb_image/stb_image.h"

Texture::Texture(const std::string& path, const std::string& directory)
    : m_RendererID(0), m_FilePath(path), m_LocalBuffer(nullptr), m_Width(0), m_Height(0), m_BPP(0)
{
    std::string filename = path.c_str();
    if (!directory.empty())
    {
        filename = directory + '/' + filename;
    }
    /*
    // 获取所需的宽字符长度
    int len = MultiByteToWideChar(CP_ACP, 0, filename.c_str(), -1, NULL, 0);
    // 分配足够的内存并转换字符串
    std::wstring wstr(len, L'\0');  // 使用std::wstring避免裸指针
    // 转换字符串
    MultiByteToWideChar(CP_ACP, 0, filename.c_str(), -1, &wstr[0], len);
    FILE* f = nullptr;
    errno_t err = _wfopen_s(&f, wstr.c_str(), L"rb");  // 使用wstr.c_str()直接传递给 _wfopen_s
    if (err != 0)
    {
        std::cout << "Failed to load texture" << std::endl;
    }
    else
    {
        // 加载并生成纹理
        stbi_set_flip_vertically_on_load(true);
        // m_BPP = nrChannels;
        m_LocalBuffer = stbi_load_from_file(f, &m_Width, &m_Height, &m_BPP, 0); // 将会用图像的宽高和颜色通道个数填充对应变量
        fclose(f);
    }
    */
    // 加载并生成纹理
    stbi_set_flip_vertically_on_load(true);
    // m_BPP = nrChannels;
    m_LocalBuffer = stbi_load(filename.c_str(), &m_Width, &m_Height, &m_BPP, 0); // 将会用图像的宽高和颜色通道个数填充对应变量
    if (m_LocalBuffer)
    {
        GLenum format = GL_RGBA; // 通过判断颜色通道个数确定图片类型
        GLenum innterFormat = GL_RGBA;
        if (m_BPP == 1)
        {
            format = GL_RED;
            innterFormat = GL_RED;
        }
        else if (m_BPP == 2)
        {
            format = GL_RG;
            innterFormat = GL_RGBA8;
        }
        else if (m_BPP == 3)
        {
            format = GL_RGB;
            innterFormat = GL_RGB;
        }
        else if (m_BPP == 4)
        {
            format = GL_RGBA;
            innterFormat = GL_RGBA;
        }
        GLCall(glGenTextures(1, &m_RendererID));
        GLCall(glBindTexture(GL_TEXTURE_2D, m_RendererID));
        // glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor); // 使用clamp_to_border需要使用fv后缀函数指定边缘颜色
        // 为当前绑定的纹理对象设置环绕和过滤方式
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        // 第一个参数指定纹理目标，第二个参数为纹理制定多级渐远纹理的级别，第三个参数为纹理存储的格式，第四第五参数设置纹理的宽高
        // 第六参数总设为0（历史遗留问题），第七第八个参数定义了源图的格式和数据类型，最后一个参数是图像数据
        GLCall(glTexImage2D(GL_TEXTURE_2D, 0, innterFormat, m_Width, m_Height, 0, format, GL_UNSIGNED_BYTE, m_LocalBuffer));
        glGenerateMipmap(GL_TEXTURE_2D);

        stbi_image_free(m_LocalBuffer); // 释放图像内存
    }
    else
    {
        std::cout << "Failed to load texture" << std::endl;
    }
    
    GLCall(glBindTexture(GL_TEXTURE_2D, 0));
}

Texture::~Texture()
{
}

void Texture::Bind(unsigned int slot) const
{
    GLCall(glActiveTexture(GL_TEXTURE0 + slot));
    GLCall(glBindTexture(GL_TEXTURE_2D, m_RendererID));
}

void Texture::Unbind() const
{
    GLCall(glBindTexture(GL_TEXTURE_2D, 0));
}

void Texture::Delete() const
{
     GLCall(glDeleteTextures(1, &m_RendererID));
}
